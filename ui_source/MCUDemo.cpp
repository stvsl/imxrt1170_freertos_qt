// This code is auto-generated by Qul's qmltocpp tool from the file 'MCUDemo.qml'
// WARNING! All changes made in this file will be lost!
#include "MCUDemo.h"
#include <qul/private/graphicsdevice.h>
#include <qul/private/filecache.h>

extern const Qul::Private::RasterBuffer *const qul_rasterBuffer_p506_5F133413_16142385033138834515_handle;
extern const Qul::Private::FontEngine * const qul_font_default_22_400;
static const Qul::Private::String qulCurrentFileDir(".", 1);
extern Qul::Private::Items::ItemBase *loaderItemAllocator(const Qul::Private::String &uri, const Qul::Private::String &currentFileDir);

namespace Qul { namespace Private {
Qul::Property<int> &translationIndexProperty_da39a3ee5e6b4b0d3255bfef95601890afd80709();
extern const uint32_t *qul_translation_offsets_efb9bd711ca4f2949696cd127bc89dde1183bf23();
extern const uint8_t *qul_translations_efb9bd711ca4f2949696cd127bc89dde1183bf23();
}}


namespace {
#if defined(QUL_CC_IAR)
#pragma diag_suppress=Pe177 // declared but never referenced
#elif defined(QUL_CC_GNU)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
#endif
static Qul::Property<int> &translationIndexProperty() { return Qul::Private::translationIndexProperty_da39a3ee5e6b4b0d3255bfef95601890afd80709(); }
static int translationIndex() { return translationIndexProperty().value(); }
static const char *qul_translation(int entry) {
    const size_t translationLanguageCount = 1;
    const uint32_t *offsets = Qul::Private::qul_translation_offsets_efb9bd711ca4f2949696cd127bc89dde1183bf23();
    const uint8_t *translations = Qul::Private::qul_translations_efb9bd711ca4f2949696cd127bc89dde1183bf23();
    return reinterpret_cast<const char *>(&translations[offsets[entry * translationLanguageCount + translationIndex()]]);
}
#if defined(QUL_CC_IAR)
#pragma diag_default=Pe177 // declared but never referenced
#elif defined(QUL_CC_GNU)
#pragma GCC diagnostic pop
#endif
}


int MCUDemo::image_x_anchor_bindingFunctor::operator()(MCUDemo *self) const {
        return int((int(self->width.value()) + 1)/2 - ((self->image.width.value())/2.0));
}
int MCUDemo::image_y_anchor_bindingFunctor::operator()(MCUDemo *self) const {
        return int((int(self->height.value()) + 1)/2 - ((self->image.height.value())/2.0));
}

void MCUDemo::MCUDemo_3061336939_bindingFunctor::operator()() const
{
    int r2__led_status;
    bool r2_3;
    QUL_DECL_UNUSED Daemon * r2 = NULL;
    QUL_DECL_UNUSED Daemon::EventType r2__LED_STATUS_CHANGED;
    QUL_DECL_UNUSED Daemon::EventType r10__LED_STATUS_CHANGED;
    int r11;
    QUL_DECL_UNUSED Daemon * r7 = NULL;
    // Daemon.led_status = Daemon.led_status == 0 ? 1 : 0;
    // line 27  "MCUDemo.qml"
    r2 = &Daemon ::instance();
    r7 = r2;
    r2 = &Daemon ::instance();
    r2__led_status = r2->led_status.value();
    r2_3 = Qul::Private::testEqual(0, r2__led_status);
    if (!r2_3) goto label_0;;
    r2__led_status = 1;
    goto label_1;;
    label_0:;
    r2__led_status = 0;
    label_1:;
    r7->led_status.setValue(r2__led_status);
    // if (Daemon.led_status)
    // line 28  "MCUDemo.qml"
    r2 = &Daemon ::instance();
    r2__led_status = r2->led_status.value();
    if (!r2__led_status) {
    goto label_2;};
    /*
    Daemon.pushEvent(Daemon.LED_STATUS_CHANGED, 0);
    else
    */
    // line 29  "MCUDemo.qml"
    r2 = &Daemon ::instance();
    r7 = r2;
    r2 = &Daemon ::instance();
    r2__LED_STATUS_CHANGED = Daemon::LED_STATUS_CHANGED;
    r10__LED_STATUS_CHANGED = r2__LED_STATUS_CHANGED;
    r11 = 0;
    r7->pushEvent(r10__LED_STATUS_CHANGED, r11);
    goto label_3;;
    {
    }
    label_2:;
    // Daemon.pushEvent(Daemon.LED_STATUS_CHANGED, 1);
    // line 31  "MCUDemo.qml"
    r2 = &Daemon ::instance();
    r7 = r2;
    r2 = &Daemon ::instance();
    r2__LED_STATUS_CHANGED = Daemon::LED_STATUS_CHANGED;
    r10__LED_STATUS_CHANGED = r2__LED_STATUS_CHANGED;
    r11 = 1;
    r7->pushEvent(r10__LED_STATUS_CHANGED, r11);
    label_3:;
    // }
    // line 32  "MCUDemo.qml"
    return ;
    
}
int MCUDemo::text__x_anchor_bindingFunctor::operator()(MCUDemo *self) const {
        return int((int(self->width.value()) + 1)/2 - ((self->text_.width.value())/2.0));
}
int MCUDemo::text__y_anchor_bindingFunctor::operator()(MCUDemo *self) const {
        return int((int(self->height.value()) + 1)/2 - ((self->text_.height.value())/2.0));
}
Qul::Private::String MCUDemo::MCUDemo_1280003633_bindingFunctor::operator()(MCUDemo *self) const
{
    (void) self;
    int r2__led_status;
    QUL_DECL_UNUSED Daemon * r2_2 = NULL;
    QUL_DECL_UNUSED Qul::Private::String r2;
    QUL_DECL_UNUSED Qul::Private::String r7;
    // text: "Hello World " + (Daemon.led_status ? "ON" : "OFF")
    // line 36  "MCUDemo.qml"
    r2 = Qul::Private::String(Qul::Private::Latin1String("Hello World ", 12));
    r7 = r2;
    r2_2 = &Daemon ::instance();
    r2__led_status = r2_2->led_status.value();
    if (!r2__led_status) goto label_0;;
    r2 = Qul::Private::String(Qul::Private::Latin1String("ON", 2));
    goto label_1;;
    label_0:;
    r2 = Qul::Private::String(Qul::Private::Latin1String("OFF", 3));
    label_1:;
    r2 = r7 + r2;
    return r2;
    
}

void MCUDemo::MCUDemo_1329321080_bindingFunctor::operator()(Qul::Private::Builtins::MouseEvent * mouse) const
{
    QUL_UNUSED(mouse);
    // }
    // line 51  "MCUDemo.qml"
    return ;
    
}
int MCUDemo::mousearea_width_anchor_bindingFunctor::operator()(MCUDemo *self) const {
        return int(self->width.value());
}
int MCUDemo::mousearea_height_anchor_bindingFunctor::operator()(MCUDemo *self) const {
        return int(self->height.value());
}

MCUDemo::MCUDemo()

    : Qul::Private::Items::ItemBase ::ExtraStorage_itemExtraProperties<Qul::Private::Items::Rectangle  >(this), Qul::Private::Items::Rectangle ::ExtraStorage_rectangleExtraProperties<Qul::Private::Items::Rectangle  >(this)
    , image_x_anchor_binding(image_x_anchor_bindingFunctor())
    , image_y_anchor_binding(image_y_anchor_bindingFunctor())
    , timer_onTriggered_binding(this, timer_onTriggered_binding_slot, &timer.triggered)
    , text__x_anchor_binding(text__x_anchor_bindingFunctor())
    , text__y_anchor_binding(text__y_anchor_bindingFunctor())
    , text__text_binding(MCUDemo_1280003633_bindingFunctor())
    , mousearea_onClicked_binding(this, mousearea_onClicked_binding_slot, &mousearea.clicked)
    , mousearea_width_anchor_binding(mousearea_width_anchor_bindingFunctor())
    , mousearea_height_anchor_binding(mousearea_height_anchor_bindingFunctor())
{
    // height: 720
    // line 6  "MCUDemo.qml"
    height.setValue(720);
    // width: 1280
    // line 5  "MCUDemo.qml"
    width.setValue(1280);
    // Image {
    // line 8  "MCUDemo.qml"
    appendChild(this, &image);
    // duration: 1000
    // line 17  "MCUDemo.qml"
    rotationanimation.duration.setValue(1000);
    // to: 360
    // line 16  "MCUDemo.qml"
    rotationanimation.to.setValue(360);
    // from: 0
    // line 15  "MCUDemo.qml"
    rotationanimation.from.setValue(0);
    // loops: Animation.Infinite
    // line 14  "MCUDemo.qml"
    rotationanimation.animationExtraProperties->loops.setValue(2147483647);
    // running: true
    // line 13  "MCUDemo.qml"
    rotationanimation.running.setValue(true);
    image_x_anchor_binding.init<MCUDemo, &MCUDemo::image_x_anchor_binding>(image.x);
    image.x.setBinding(&image_x_anchor_binding);
    image_y_anchor_binding.init<MCUDemo, &MCUDemo::image_y_anchor_binding>(image.y);
    image.y.setBinding(&image_y_anchor_binding);
    // source: "images/p506_133413.png"
    // line 9  "MCUDemo.qml"
    image.source.setValue(Qul::Private::ImagePrivate::fromRasterBuffer(qul_rasterBuffer_p506_5F133413_16142385033138834515_handle));
    // Timer {
    // line 22  "MCUDemo.qml"
    appendChild(this, &timer);
    // repeat: true
    // line 25  "MCUDemo.qml"
    timer.repeat.setValue(true);
    // interval: 100
    // line 24  "MCUDemo.qml"
    timer.interval.setValue(100);
    // running: true
    // line 23  "MCUDemo.qml"
    timer.running.setValue(true);
    // Text {
    // line 35  "MCUDemo.qml"
    appendChild(this, &text_);
    // font: Qt.font({
    // line 38  "MCUDemo.qml"
    text_.font.setValue(Qul::Private::FontPointer(qul_font_default_22_400));
    text__x_anchor_binding.init<MCUDemo, &MCUDemo::text__x_anchor_binding>(text_.x);
    text_.x.setBinding(&text__x_anchor_binding);
    text__y_anchor_binding.init<MCUDemo, &MCUDemo::text__y_anchor_binding>(text_.y);
    text_.y.setBinding(&text__y_anchor_binding);
    text__text_binding.init<MCUDemo, &MCUDemo::text__text_binding>(text_.text);
    // text: "Hello World " + (Daemon.led_status ? "ON" : "OFF")
    // line 36  "MCUDemo.qml"
    text_.text.setBinding (&text__text_binding);
    // MouseArea {
    // line 44  "MCUDemo.qml"
    appendChild(this, &mousearea);
    mousearea.x.setValue(int());
    mousearea_width_anchor_binding.init<MCUDemo, &MCUDemo::mousearea_width_anchor_binding>(mousearea.width);
    mousearea.width.setBinding(&mousearea_width_anchor_binding);
    mousearea.y.setValue(int());
    mousearea_height_anchor_binding.init<MCUDemo, &MCUDemo::mousearea_height_anchor_binding>(mousearea.height);
    mousearea.height.setBinding(&mousearea_height_anchor_binding);
    // RotationAnimation on rotation {
    // line 12  "MCUDemo.qml"
    rotationanimation.on(&image.inlineTransform.rotation);
}

